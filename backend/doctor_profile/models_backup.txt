from phone_field import PhoneField
from django.db import models
from django.core.exceptions import ValidationError
from django.contrib.auth.models import User


class Specialty(models.Model):
    title = models.CharField(max_length=220)

    def __str__(self):
        return self.title


class HospitalOrWorkplace(models.Model):
    name = models.CharField(max_length=500)


class DoctorProfile(models.Model):
    class ChoiseSex(models.TextChoices):
        MALE = "male", "Male"
        FEMALE = "female", "Female"
    approved = models.BooleanField(default=False)
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    first_name = models.CharField(max_length=220, blank=True)
    last_name = models.CharField(max_length=220, blank=True)
    profile_picture = models.ImageField(upload_to="profiles/", blank=True)
    sex = models.CharField(
        max_length=10, choices=ChoiseSex.choices, default=ChoiseSex.MALE)
    email = models.EmailField(blank=True)
    phone = PhoneField(help_text="Add your phone number")

    qualifications = models.TextField()
    specialty = models.ManyToManyField(Specialty)
    workplace = models.ForeignKey(
        HospitalOrWorkplace, on_delete=models.CASCADE)
    designation = models.CharField(max_length=220)

    def check_profile_picture(self):
        if not self.profile_picture:
            # Assign default profile picture based on sex
            if self.sex == self.ChoiseSex.MALE:
                self.profile_picture = "static/images/doctors_default/default_male.jpg"
            else:
                self.profile_picture = "static/images/doctors_default/default_female.jpg"

    def save(self, *args, **kwargs):
        self.check_profile_picture()
        return super().save(*args, **kwargs)


class Chamber(models.Model):
    class ClosedDays(models.TextChoices):
        SUN = 'sun', 'Sunday'
        MON = 'mon', 'Monday'
        TUE = 'tue', 'Tuesday'
        WED = 'wed', 'Wednesday'
        THU = 'thu', 'Thursday'
        FRI = 'fri', 'Friday'
        SAT = 'sat', 'Saturday'

    doctor = models.ForeignKey(
        DoctorProfile, on_delete=models.CASCADE, related_name="chambers")
    default_chamber = models.BooleanField(default=True)
    chamber_name = models.CharField(max_length=220)
    chamber_address = models.CharField(max_length=220)
    visiting_hour_start = models.TimeField()
    visiting_hour_end = models.TimeField()
    appointment_number = PhoneField(
        help_text="Mobile Number (For Appointment)")
    closed_days = models.CharField(
        max_length=3, choices=ClosedDays.choices, default=ClosedDays.FRI)

    def check_default_exist(self):
        if self.default_chamber:
            if Chamber.objects.filter(doctor=self.doctor, default_chamber=True).exclude(pk=self.pk).exists():
                raise ValidationError(
                    "Each doctor can have only one default chamber.")

    def save(self, *args, **kwargs):
        self.check_default_exist()
        super().save(*args, **kwargs)


class PaymentRef(models.Model):
    doctor = models.OneToOneRel(DoctorProfile, on_delete=models.CASCADE)
    method = models.CharField(max_length=220)
    phone = PhoneField(help_text='Payment phone number')
